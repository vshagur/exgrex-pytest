{
  "fractionalScore": 0,
  "feedback": "======================================================================\nTest result of the task: \"Example task.\"\n======================================================================\nTotal tests: 19. Tests failed: 7. Total testing time: 0.1129.\n======================================================================\n[Failed] test_2.\nnew_summa = None\n\n    def test_2(new_summa):\n        \"\"\"failed\"\"\"\n>       assert summa(1, 0) == 5, 'Test 2. assert message test_2'\nE       AssertionError: Test 2. assert message test_2\nE       assert 1 == 5\nE        +  where 1 = summa(1, 0)\n\n../../grader_a/ABCD/tests/test_example.py:23: AssertionError\n======================================================================\n[Failed] test_5.\ndef test_5():\n        \"\"\"failed\"\"\"\n>       assert [1, 2, 3] == [1, 2, 3, 4], 'Test 5. assert message test_5'\nE       AssertionError: Test 5. assert message test_5\nE       assert [1, 2, 3] == [1, 2, 3, 4]\nE         Right contains one more item: 4\nE         Use -v to get the full diff\n\n../../grader_a/ABCD/tests/test_example.py:42: AssertionError\n======================================================================\n[Failed] test_7[1].\nvalue = 1\n\n    @pytest.mark.parametrize('value', [1, 2, 3, 4, 5])\n    def test_7(value):\n>       assert value in (4, 5), 'Test 7.assert message test_7'\nE       AssertionError: Test 7.assert message test_7\nE       assert 1 in (4, 5)\n\n../../grader_a/ABCD/tests/test_example.py:52: AssertionError\n======================================================================\n[Failed] test_7[2].\nvalue = 2\n\n    @pytest.mark.parametrize('value', [1, 2, 3, 4, 5])\n    def test_7(value):\n>       assert value in (4, 5), 'Test 7.assert message test_7'\nE       AssertionError: Test 7.assert message test_7\nE       assert 2 in (4, 5)\n\n../../grader_a/ABCD/tests/test_example.py:52: AssertionError\n======================================================================\n[Failed] test_7[3].\nvalue = 3\n\n    @pytest.mark.parametrize('value', [1, 2, 3, 4, 5])\n    def test_7(value):\n>       assert value in (4, 5), 'Test 7.assert message test_7'\nE       AssertionError: Test 7.assert message test_7\nE       assert 3 in (4, 5)\n\n../../grader_a/ABCD/tests/test_example.py:52: AssertionError\n======================================================================\n[Failed] TestExample.test_9.\nself = <tests.test_example.TestExample object at 0x7f49f93d9f28>\n\n    def test_9(self):\n>       assert 'asdf' == 'rty', 'Test 9. assert message test_9'\nE       AssertionError: Test 9. assert message test_9\nE       assert 'asdf' == 'rty'\nE         - rty\nE         + asdf\n\n../../grader_a/ABCD/tests/test_example.py:81: AssertionError\n======================================================================\n[Failed] TestExample.test_11.\nself = <tests.test_example.TestExample object at 0x7f49f938c9b0>\nnew_summa = None\n\n    def test_11(self, new_summa):\n>       assert new_summa(4, 6) == 10, 'Test 11. assert message test_11'\nE       TypeError: 'NoneType' object is not callable\n\n../../grader_a/ABCD/tests/test_example.py:87: TypeError\n======================================================================\nNot passed. Try again."
}
